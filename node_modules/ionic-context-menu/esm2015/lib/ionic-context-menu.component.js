/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { PopoverController } from '@ionic/angular';
import { IonicContextMenuContentComponent } from './ionic-context-menu-content.component';
export class IonicContextMenuComponent {
    /**
     * @param {?} popoverCtrl
     */
    constructor(popoverCtrl) {
        this.popoverCtrl = popoverCtrl;
    }
    /**
     * @param {?} child
     * @return {?}
     */
    present(child) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.popover = yield this.popoverCtrl.create({
                component: IonicContextMenuContentComponent,
                componentProps: {
                    template: child
                },
                event,
                translucent: true
            });
            return yield this.popover.present();
        });
    }
}
IonicContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ionic-context-menu',
                template: `
    <div>
      <ion-button (click)="present(template)">
        <ion-icon slot="end" [name]="icon || 'more'"></ion-icon>
      </ion-button>
      <ng-template #template>
        <div (click)="popover.dismiss()">
          <ng-content></ng-content>
        </div>
      </ng-template>
    </div>
  `,
                styles: []
            },] },
];
/** @nocollapse */
IonicContextMenuComponent.ctorParameters = () => [
    { type: PopoverController }
];
IonicContextMenuComponent.propDecorators = {
    icon: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    IonicContextMenuComponent.prototype.popover;
    /** @type {?} */
    IonicContextMenuComponent.prototype.icon;
    /** @type {?} */
    IonicContextMenuComponent.prototype.popoverCtrl;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtY29udGV4dC1tZW51LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lvbmljLWNvbnRleHQtbWVudS8iLCJzb3VyY2VzIjpbImxpYi9pb25pYy1jb250ZXh0LW1lbnUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLGdDQUFnQyxFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFrQjFGLE1BQU07Ozs7SUFJSixZQUFvQixXQUE4QjtRQUE5QixnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7S0FBSzs7Ozs7SUFFakQsT0FBTyxDQUFDLEtBQUs7O1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztnQkFDM0MsU0FBUyxFQUFFLGdDQUFnQztnQkFDM0MsY0FBYyxFQUFFO29CQUNkLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjtnQkFDRCxLQUFLO2dCQUNMLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztZQUNILE9BQU8sTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDOztLQUNyQzs7O1lBaENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0dBV1Q7Z0JBQ0QsTUFBTSxFQUFFLEVBQUU7YUFDWDs7OztZQWxCUSxpQkFBaUI7OzttQkFxQnZCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvcG92ZXJDb250cm9sbGVyIH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xyXG5pbXBvcnQgeyBJb25pY0NvbnRleHRNZW51Q29udGVudENvbXBvbmVudCB9IGZyb20gJy4vaW9uaWMtY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnaW9uaWMtY29udGV4dC1tZW51JyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdj5cclxuICAgICAgPGlvbi1idXR0b24gKGNsaWNrKT1cInByZXNlbnQodGVtcGxhdGUpXCI+XHJcbiAgICAgICAgPGlvbi1pY29uIHNsb3Q9XCJlbmRcIiBbbmFtZV09XCJpY29uIHx8ICdtb3JlJ1wiPjwvaW9uLWljb24+XHJcbiAgICAgIDwvaW9uLWJ1dHRvbj5cclxuICAgICAgPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cclxuICAgICAgICA8ZGl2IChjbGljayk9XCJwb3BvdmVyLmRpc21pc3MoKVwiPlxyXG4gICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJb25pY0NvbnRleHRNZW51Q29tcG9uZW50IHtcclxuICBwb3BvdmVyOiBIVE1MSW9uUG9wb3ZlckVsZW1lbnQ7XHJcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvcG92ZXJDdHJsOiBQb3BvdmVyQ29udHJvbGxlcikgeyB9XHJcblxyXG4gIGFzeW5jIHByZXNlbnQoY2hpbGQpIHtcclxuICAgIHRoaXMucG9wb3ZlciA9IGF3YWl0IHRoaXMucG9wb3ZlckN0cmwuY3JlYXRlKHtcclxuICAgICAgY29tcG9uZW50OiBJb25pY0NvbnRleHRNZW51Q29udGVudENvbXBvbmVudCxcclxuICAgICAgY29tcG9uZW50UHJvcHM6IHtcclxuICAgICAgICB0ZW1wbGF0ZTogY2hpbGRcclxuICAgICAgfSxcclxuICAgICAgZXZlbnQsXHJcbiAgICAgIHRyYW5zbHVjZW50OiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvcG92ZXIucHJlc2VudCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19