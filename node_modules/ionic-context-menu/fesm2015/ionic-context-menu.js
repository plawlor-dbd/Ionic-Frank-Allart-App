import { Component, Input, NgModule } from '@angular/core';
import { __awaiter } from 'tslib';
import { PopoverController, IonicModule } from '@ionic/angular';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class IonicContextMenuContentComponent {
}
IonicContextMenuContentComponent.decorators = [
    { type: Component, args: [{
                selector: 'ionic-context-menu-content',
                template: `
  <ng-template #defaultTemplate>
    <div></div>
  </ng-template>
  <ng-container *ngTemplateOutlet="template ? template : defaultTemplate"></ng-container>
`
            },] },
];
IonicContextMenuContentComponent.propDecorators = {
    template: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class IonicContextMenuComponent {
    /**
     * @param {?} popoverCtrl
     */
    constructor(popoverCtrl) {
        this.popoverCtrl = popoverCtrl;
    }
    /**
     * @param {?} child
     * @return {?}
     */
    present(child) {
        return __awaiter(this, void 0, void 0, function* () {
            this.popover = yield this.popoverCtrl.create({
                component: IonicContextMenuContentComponent,
                componentProps: {
                    template: child
                },
                event,
                translucent: true
            });
            return yield this.popover.present();
        });
    }
}
IonicContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'ionic-context-menu',
                template: `
    <div>
      <ion-button (click)="present(template)">
        <ion-icon slot="end" [name]="icon || 'more'"></ion-icon>
      </ion-button>
      <ng-template #template>
        <div (click)="popover.dismiss()">
          <ng-content></ng-content>
        </div>
      </ng-template>
    </div>
  `,
                styles: []
            },] },
];
/** @nocollapse */
IonicContextMenuComponent.ctorParameters = () => [
    { type: PopoverController }
];
IonicContextMenuComponent.propDecorators = {
    icon: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class IonicContextMenuItemComponent {
}
IonicContextMenuItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'ionic-context-menu-item',
                template: `
  <ion-item lines="none">
    <ion-icon [name]="icon" slot="start"></ion-icon>
    <ion-label>
      <ng-content></ng-content>
    </ion-label>
  </ion-item>
`
            },] },
];
IonicContextMenuItemComponent.propDecorators = {
    icon: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class IonicContextMenuModule {
}
IonicContextMenuModule.decorators = [
    { type: NgModule, args: [{
                imports: [IonicModule, CommonModule],
                declarations: [IonicContextMenuComponent, IonicContextMenuContentComponent, IonicContextMenuItemComponent],
                exports: [IonicContextMenuComponent, IonicContextMenuContentComponent, IonicContextMenuItemComponent],
                entryComponents: [IonicContextMenuComponent, IonicContextMenuContentComponent, IonicContextMenuItemComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { IonicContextMenuComponent, IonicContextMenuModule, IonicContextMenuContentComponent as ɵa, IonicContextMenuItemComponent as ɵb };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW9uaWMtY29udGV4dC1tZW51LmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9pb25pYy1jb250ZXh0LW1lbnUvbGliL2lvbmljLWNvbnRleHQtbWVudS1jb250ZW50LmNvbXBvbmVudC50cyIsIm5nOi8vaW9uaWMtY29udGV4dC1tZW51L2xpYi9pb25pYy1jb250ZXh0LW1lbnUuY29tcG9uZW50LnRzIiwibmc6Ly9pb25pYy1jb250ZXh0LW1lbnUvbGliL2lvbmljLWNvbnRleHQtbWVudS1pdGVtLmNvbXBvbmVudC50cyIsIm5nOi8vaW9uaWMtY29udGV4dC1tZW51L2xpYi9pb25pYy1jb250ZXh0LW1lbnUubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2lvbmljLWNvbnRleHQtbWVudS1jb250ZW50JyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gIDxuZy10ZW1wbGF0ZSAjZGVmYXVsdFRlbXBsYXRlPlxyXG4gICAgPGRpdj48L2Rpdj5cclxuICA8L25nLXRlbXBsYXRlPlxyXG4gIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZSA/IHRlbXBsYXRlIDogZGVmYXVsdFRlbXBsYXRlXCI+PC9uZy1jb250YWluZXI+XHJcbmBcclxufSlcclxuZXhwb3J0IGNsYXNzIElvbmljQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50IHtcclxuICBASW5wdXQoKSB0ZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxufVxyXG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvcG92ZXJDb250cm9sbGVyIH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xyXG5pbXBvcnQgeyBJb25pY0NvbnRleHRNZW51Q29udGVudENvbXBvbmVudCB9IGZyb20gJy4vaW9uaWMtY29udGV4dC1tZW51LWNvbnRlbnQuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnaW9uaWMtY29udGV4dC1tZW51JyxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdj5cclxuICAgICAgPGlvbi1idXR0b24gKGNsaWNrKT1cInByZXNlbnQodGVtcGxhdGUpXCI+XHJcbiAgICAgICAgPGlvbi1pY29uIHNsb3Q9XCJlbmRcIiBbbmFtZV09XCJpY29uIHx8ICdtb3JlJ1wiPjwvaW9uLWljb24+XHJcbiAgICAgIDwvaW9uLWJ1dHRvbj5cclxuICAgICAgPG5nLXRlbXBsYXRlICN0ZW1wbGF0ZT5cclxuICAgICAgICA8ZGl2IChjbGljayk9XCJwb3BvdmVyLmRpc21pc3MoKVwiPlxyXG4gICAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L25nLXRlbXBsYXRlPlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJb25pY0NvbnRleHRNZW51Q29tcG9uZW50IHtcclxuICBwb3BvdmVyOiBIVE1MSW9uUG9wb3ZlckVsZW1lbnQ7XHJcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBvcG92ZXJDdHJsOiBQb3BvdmVyQ29udHJvbGxlcikgeyB9XHJcblxyXG4gIGFzeW5jIHByZXNlbnQoY2hpbGQpIHtcclxuICAgIHRoaXMucG9wb3ZlciA9IGF3YWl0IHRoaXMucG9wb3ZlckN0cmwuY3JlYXRlKHtcclxuICAgICAgY29tcG9uZW50OiBJb25pY0NvbnRleHRNZW51Q29udGVudENvbXBvbmVudCxcclxuICAgICAgY29tcG9uZW50UHJvcHM6IHtcclxuICAgICAgICB0ZW1wbGF0ZTogY2hpbGRcclxuICAgICAgfSxcclxuICAgICAgZXZlbnQsXHJcbiAgICAgIHRyYW5zbHVjZW50OiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLnBvcG92ZXIucHJlc2VudCgpO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdpb25pYy1jb250ZXh0LW1lbnUtaXRlbScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICA8aW9uLWl0ZW0gbGluZXM9XCJub25lXCI+XHJcbiAgICA8aW9uLWljb24gW25hbWVdPVwiaWNvblwiIHNsb3Q9XCJzdGFydFwiPjwvaW9uLWljb24+XHJcbiAgICA8aW9uLWxhYmVsPlxyXG4gICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICA8L2lvbi1sYWJlbD5cclxuICA8L2lvbi1pdGVtPlxyXG5gXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJb25pY0NvbnRleHRNZW51SXRlbUNvbXBvbmVudCB7XHJcbiAgQElucHV0KCkgaWNvbjogc3RyaW5nO1xyXG59XHJcbiIsImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJb25pY0NvbnRleHRNZW51Q29tcG9uZW50IH0gZnJvbSAnLi9pb25pYy1jb250ZXh0LW1lbnUuY29tcG9uZW50JztcbmltcG9ydCB7IElvbmljTW9kdWxlIH0gZnJvbSAnQGlvbmljL2FuZ3VsYXInO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IElvbmljQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50IH0gZnJvbSAnLi9pb25pYy1jb250ZXh0LW1lbnUtY29udGVudC5jb21wb25lbnQnO1xuaW1wb3J0IHsgSW9uaWNDb250ZXh0TWVudUl0ZW1Db21wb25lbnQgfSBmcm9tICcuL2lvbmljLWNvbnRleHQtbWVudS1pdGVtLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtJb25pY01vZHVsZSwgQ29tbW9uTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbSW9uaWNDb250ZXh0TWVudUNvbXBvbmVudCwgSW9uaWNDb250ZXh0TWVudUNvbnRlbnRDb21wb25lbnQsIElvbmljQ29udGV4dE1lbnVJdGVtQ29tcG9uZW50XSxcbiAgZXhwb3J0czogW0lvbmljQ29udGV4dE1lbnVDb21wb25lbnQsIElvbmljQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50LCBJb25pY0NvbnRleHRNZW51SXRlbUNvbXBvbmVudF0sXG4gIGVudHJ5Q29tcG9uZW50czogW0lvbmljQ29udGV4dE1lbnVDb21wb25lbnQsIElvbmljQ29udGV4dE1lbnVDb250ZW50Q29tcG9uZW50LCBJb25pY0NvbnRleHRNZW51SXRlbUNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgSW9uaWNDb250ZXh0TWVudU1vZHVsZSB7IH1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7O1lBRUMsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSw0QkFBNEI7Z0JBQ3RDLFFBQVEsRUFBRTs7Ozs7Q0FLWDthQUNBOzs7dUJBRUUsS0FBSzs7Ozs7Ozs7Ozs7SUNZTixZQUFvQixXQUE4QjtRQUE5QixnQkFBVyxHQUFYLFdBQVcsQ0FBbUI7S0FBSzs7Ozs7SUFFakQsT0FBTyxDQUFDLEtBQUs7O1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztnQkFDM0MsU0FBUyxFQUFFLGdDQUFnQztnQkFDM0MsY0FBYyxFQUFFO29CQUNkLFFBQVEsRUFBRSxLQUFLO2lCQUNoQjtnQkFDRCxLQUFLO2dCQUNMLFdBQVcsRUFBRSxJQUFJO2FBQ2xCLENBQUMsQ0FBQztZQUNILE9BQU8sTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDOztLQUNyQzs7O1lBaENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7O0dBV1Q7Z0JBQ0QsTUFBTSxFQUFFLEVBQUU7YUFDWDs7OztZQWxCUSxpQkFBaUI7OzttQkFxQnZCLEtBQUs7Ozs7Ozs7QUN0QlI7OztZQUVDLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUseUJBQXlCO2dCQUNuQyxRQUFRLEVBQUU7Ozs7Ozs7Q0FPWDthQUNBOzs7bUJBRUUsS0FBSzs7Ozs7OztBQ2RSOzs7WUFPQyxRQUFRLFNBQUM7Z0JBQ1IsT0FBTyxFQUFFLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQztnQkFDcEMsWUFBWSxFQUFFLENBQUMseUJBQXlCLEVBQUUsZ0NBQWdDLEVBQUUsNkJBQTZCLENBQUM7Z0JBQzFHLE9BQU8sRUFBRSxDQUFDLHlCQUF5QixFQUFFLGdDQUFnQyxFQUFFLDZCQUE2QixDQUFDO2dCQUNyRyxlQUFlLEVBQUUsQ0FBQyx5QkFBeUIsRUFBRSxnQ0FBZ0MsRUFBRSw2QkFBNkIsQ0FBQzthQUM5Rzs7Ozs7Ozs7Ozs7Ozs7OyJ9